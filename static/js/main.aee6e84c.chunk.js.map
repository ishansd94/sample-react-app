{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","props","headers","Headers","map","r","i","react_default","a","createElement","key","TableBody","data","Data","name","job","className","onClick","RemoveItem","Table","Table_TableHeader","this","Table_TableBody","Content","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","value","setState","defineProperty","submitForm","preventDefault","HandleSubmit","state","initialState","type","onChange","App","handleSubmit","item","toConsumableArray","concat","removeItem","index","filter","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aee6e84c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst TableHeader = props => {\r\n\r\n    const headers = props.Headers.map((r, i) => {\r\n        return (\r\n            <th key={i}>\r\n                {r}\r\n            </th>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {headers}\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\n\r\nconst TableBody = props => {\r\n\r\n    const data = props.Data.map((r, i) => {\r\n        return (\r\n            <tr key={i}>\r\n                <td>{r.name}</td>\r\n                <td>{r.job}</td>\r\n                <td><button className=\"btn btn-danger\" onClick={ () => props.RemoveItem(i) }>X</button></td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n\r\n    return (\r\n        <tbody>\r\n            {data}\r\n        </tbody>\r\n    );\r\n};\r\n\r\n\r\nclass Table extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <table className=\"table table-dark\">\r\n                <TableHeader Headers={this.props.Headers} />\r\n                <TableBody\r\n                    Data={this.props.Content}\r\n                    RemoveItem={this.props.RemoveItem}\r\n                />\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;","import React, {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            name: '',\r\n            job: ''\r\n        };\r\n\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = e => {\r\n        const {name, value} = e.target;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    submitForm = e => {\r\n        e.preventDefault();\r\n        this.props.HandleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form className=\"form\">\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"label\">Name</label>\r\n                    <input type=\"text\" name=\"name\" className=\"form-control\" value={this.state.name} onChange={this.handleChange}/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"label\">Job</label>\r\n                    <input type=\"text\" name=\"job\" className=\"form-control\" value={this.state.job} onChange={this.handleChange}/>\r\n                </div>\r\n\r\n                <input type=\"submit\" className=\"btn btn-success\" value=\"Submit\" onClick={this.submitForm}/>\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            Headers: [\n                \"Name\",\n                \"Job\",\n                \"Delete\"\n            ],\n\n            Content: [\n                {\n                    'name': 'Charlie',\n                    'job': 'Janitor'\n                },\n                {\n                    'name': 'Mac',\n                    'job': 'Bouncer'\n                },\n                {\n                    'name': 'Dee',\n                    'job': 'Aspring actress'\n                },\n                {\n                    'name': 'Dennis',\n                    'job': 'Bartender'\n                }\n            ]\n\n        }\n    }\n\n    handleSubmit = item => {\n        this.setState({\n            Content: [...this.state.Content, item],\n        })\n    };\n\n    removeItem = index => {\n\n        this.setState({\n            Content: this.state.Content.filter((item, i)=>{\n                return i !== index;\n            })\n        });\n\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Table Headers={this.state.Headers} Content={this.state.Content} RemoveItem={this.removeItem}/>\n                <Form HandleSubmit={this.handleSubmit}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}